// Generated by CoffeeScript 1.6.2
(function() {
  var encode, encodeDictionary, encodeInteger, encodeList, encodeString, encodingFunctions, getType, isArray, isDataStructure, isNumber, isObject, isString, sort, toString, typeTest, _ref, _ref1,
    __hasProp = {}.hasOwnProperty;

  exports.encode = encode = function(object) {
    return encodingFunctions[getType(object)](object);
  };

  if ((_ref = Object.keys) == null) {
    Object.keys = function(o) {
      var key, _results;

      _results = [];
      for (key in o) {
        if (!__hasProp.call(o, key)) continue;
        _results.push(key);
      }
      return _results;
    };
  }

  sort = Array.prototype.sort;

  toString = Object.prototype.toString;

  typeTest = function(type) {
    return function(obj) {
      return (toString.call(obj)) === ("[object " + type + "]");
    };
  };

  isArray = (_ref1 = Array.isArray) != null ? _ref1 : typeTest('Array');

  isObject = function(obj) {
    return obj === (Object(obj));
  };

  isString = typeTest('String');

  isNumber = typeTest('Number');

  getType = function(object) {
    if (isString(object)) {
      return 'string';
    }
    if (isNumber(object)) {
      return 'integer';
    }
    if (isArray(object)) {
      return 'list';
    }
    if (isObject(object)) {
      return 'dictionary';
    }
    throw new Error("Cannot bencode object: " + object);
  };

  isDataStructure = function(object) {
    var _ref2;

    return (_ref2 = getType(object)) === 'list' || _ref2 === 'dictionary';
  };

  encodeString = function(string) {
    return "" + string.length + ":" + string;
  };

  encodeInteger = function(integer) {
    return "i" + integer + "e";
  };

  encodeList = function(array) {
    var list, object;

    list = (function() {
      var _i, _len, _results;

      _results = [];
      for (_i = 0, _len = array.length; _i < _len; _i++) {
        object = array[_i];
        _results.push(encode(object));
      }
      return _results;
    })();
    return "l" + (list.join('')) + "e";
  };

  encodeDictionary = function(object) {
    var bencodedString, key, sortedKeys, _i, _len;

    sortedKeys = sort.call(Object.keys(object));
    bencodedString = '';
    for (_i = 0, _len = sortedKeys.length; _i < _len; _i++) {
      key = sortedKeys[_i];
      bencodedString = bencodedString.concat("" + (encode(key)) + (encode(object[key])));
    }
    return "d" + bencodedString + "e";
  };

  encodingFunctions = {
    'string': encodeString,
    'integer': encodeInteger,
    'list': encodeList,
    'dictionary': encodeDictionary
  };

}).call(this);
