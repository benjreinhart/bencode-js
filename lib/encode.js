// Generated by CoffeeScript 1.6.2
(function() {
  var encode, encodeDictionary, encodeInteger, encodeList, encodeString, encodingFunctions, getType, isArray, isNumber, isObject, isString, _ref, _ref1,
    __hasProp = {}.hasOwnProperty;

  _ref = require('./identity_helpers'), isArray = _ref.isArray, isString = _ref.isString, isNumber = _ref.isNumber, isObject = _ref.isObject;

  exports.encode = encode = function(object) {
    return encodingFunctions[getType(object)](object);
  };

  if ((_ref1 = Object.keys) == null) {
    Object.keys = function(o) {
      var key, _results;

      _results = [];
      for (key in o) {
        if (!__hasProp.call(o, key)) continue;
        _results.push(key);
      }
      return _results;
    };
  }

  getType = function(object) {
    if (isString(object)) {
      return 'string';
    }
    if (isNumber(object)) {
      return 'integer';
    }
    if (isArray(object)) {
      return 'list';
    }
    if (isObject(object)) {
      return 'dictionary';
    }
    throw new Error("Cannot bencode object: " + object);
  };

  encodeString = function(string) {
    return "" + string.length + ":" + string;
  };

  encodeInteger = function(integer) {
    return "i" + integer + "e";
  };

  encodeList = function(array) {
    var list, object;

    list = (function() {
      var _i, _len, _results;

      _results = [];
      for (_i = 0, _len = array.length; _i < _len; _i++) {
        object = array[_i];
        _results.push(encode(object));
      }
      return _results;
    })();
    return "l" + (list.join('')) + "e";
  };

  encodeDictionary = function(object) {
    var bencodedString, key, _i, _len, _ref2;

    bencodedString = '';
    _ref2 = (Object.keys(object)).sort();
    for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
      key = _ref2[_i];
      bencodedString += "" + (encode(key)) + (encode(object[key]));
    }
    return "d" + bencodedString + "e";
  };

  encodingFunctions = {
    'string': encodeString,
    'integer': encodeInteger,
    'list': encodeList,
    'dictionary': encodeDictionary
  };

}).call(this);
