// Generated by CoffeeScript 1.6.2
(function() {
  var INTEGER_REGEX, TYPES, composeDecodingFunction, decodeInteger, decodeString, getType, isDataStructure, isString, primitives;

  isString = require('./identity_helpers').isString;

  module.exports = function(bencodedString) {
    var counter, index;

    if (!isString(bencodedString)) {
      throw new Error('Argument must be a bencoded string');
    }
    index = 0;
    counter = function(amount) {
      if (amount == null) {
        return index;
      }
      return index += amount;
    };
    return (composeDecodingFunction(bencodedString, counter, bencodedString.length))();
  };

  TYPES = {
    'i': 'integer',
    'l': 'list',
    'd': 'dictionary'
  };

  INTEGER_REGEX = /^i(-?\d+)e/;

  getType = function(bencodedString) {
    return TYPES[bencodedString[0]] || 'string';
  };

  isDataStructure = function(type) {
    return type === 'list' || type === 'dictionary';
  };

  decodeString = function(bencodedString, counter) {
    var len, str;

    str = bencodedString.slice(counter());
    len = (str.split(':', 1))[0];
    counter(+len + (len.length + 1));
    return str.slice(len.length + 1).slice(0, +len);
  };

  decodeInteger = function(bencodedString, counter) {
    var encodedInteger, integer, str, _ref;

    str = bencodedString.slice(counter());
    _ref = str.match(INTEGER_REGEX), encodedInteger = _ref[0], integer = _ref[1];
    counter(encodedInteger.length);
    return +integer;
  };

  primitives = {
    string: decodeString,
    integer: decodeInteger
  };

  composeDecodingFunction = function(bencodedString, counter, strLength) {
    var decode;

    return decode = function() {
      var key, object, type;

      type = getType(bencodedString[counter()]);
      if (!isDataStructure(type)) {
        return primitives[type](bencodedString, counter);
      }
      object = 'list' === type ? [] : {};
      counter(1);
      while (counter() < strLength) {
        if ('e' === bencodedString[counter()]) {
          counter(1);
          break;
        }
        if ('list' === type) {
          object.push(decode());
        } else {
          key = decode();
          object[key] = decode();
        }
      }
      return object;
    };
  };

}).call(this);
