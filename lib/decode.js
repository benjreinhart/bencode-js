// Generated by CoffeeScript 2.0.0-beta4
void function () {
  var read;
  read = function (str) {
    var arr, bencoded, cache$, cache$1, cursor, key, keyLength, obj, startPos, stringLength, value, valueLength;
    switch (str[0]) {
    case 'i':
      bencoded = str.match(/^i-?\d+e/)[0];
      return [
        bencoded.length,
        +bencoded.slice(1, -1)
      ];
    case '0':
    case '1':
    case '2':
    case '3':
    case '4':
    case '5':
    case '6':
    case '7':
    case '8':
    case '9':
      stringLength = str.match(/^\d+/)[0];
      startPos = stringLength.length + 1;
      bencoded = str.slice(0, startPos + +stringLength);
      return [
        bencoded.length,
        bencoded.slice(startPos)
      ];
    case 'l':
      cursor = 1;
      arr = function (accum$) {
        var cache$, entry, entryLength;
        while (str[cursor] !== 'e') {
          cache$ = read(str.slice(cursor));
          entryLength = cache$[0];
          entry = cache$[1];
          cursor += entryLength;
          accum$.push(entry);
        }
        return accum$;
      }.call(this, []);
      return [
        cursor + 1,
        arr
      ];
    case 'd':
      cursor = 1;
      obj = {};
      while (str[cursor] !== 'e') {
        cache$ = read(str.slice(cursor));
        keyLength = cache$[0];
        key = cache$[1];
        cache$1 = read(str.slice(cursor + keyLength));
        valueLength = cache$1[0];
        value = cache$1[1];
        cursor += keyLength + valueLength;
        obj[key] = value;
      }
      return [
        cursor + 1,
        obj
      ];
    }
  };
  module.exports = function (str) {
    return read(str)[1];
  };
}.call(this);
