// Generated by CoffeeScript 1.6.2
(function() {
  var Decode,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  module.exports = Decode = (function() {
    var INTEGER_REGEX, TYPES, decodeInteger, decodeString, decodingFunctions, getType, isDataStructure;

    Decode.decode = function(bencodedString) {
      return (new Decode(bencodedString)).decode();
    };

    function Decode(bencodedString) {
      var counter,
        _this = this;

      this.bencodedString = bencodedString;
      this.decode = __bind(this.decode, this);
      this.bencodedStringLength = this.bencodedString.length;
      counter = 0;
      this.counter = function(amount) {
        if (amount == null) {
          return counter;
        }
        return counter += amount;
      };
    }

    Decode.prototype.decode = function() {
      var key, object, type;

      type = getType(this.bencodedString[this.counter()]);
      if (!isDataStructure(type)) {
        return decodingFunctions[type].call(this);
      }
      object = type === 'list' ? [] : {};
      this.counter(1);
      while (this.counter() < this.bencodedStringLength) {
        if ('e' === this.bencodedString[this.counter()]) {
          this.counter(1);
          break;
        }
        if (type === 'list') {
          object.push(this.decode());
        } else {
          key = this.decode();
          object[key] = this.decode();
        }
      }
      return object;
    };

    TYPES = {
      'i': 'integer',
      'l': 'list',
      'd': 'dictionary'
    };

    INTEGER_REGEX = /^i(-?\d+)e/;

    getType = function(bencodedString) {
      return TYPES[bencodedString[0]] || 'string';
    };

    isDataStructure = function(type) {
      return type === 'list' || type === 'dictionary';
    };

    decodeString = function() {
      var len, str;

      str = this.bencodedString.slice(this.counter());
      len = str.split(':', 1)[0];
      this.counter(+len + (len.length + 1));
      return str.slice(len.length + 1).slice(0, +len);
    };

    decodeInteger = function() {
      var encodedInteger, integer, str, _ref;

      str = this.bencodedString.slice(this.counter());
      _ref = str.match(INTEGER_REGEX), encodedInteger = _ref[0], integer = _ref[1];
      this.counter(encodedInteger.length);
      return +integer;
    };

    decodingFunctions = {
      string: decodeString,
      integer: decodeInteger
    };

    return Decode;

  })();

}).call(this);
