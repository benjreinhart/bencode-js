// Generated by CoffeeScript 1.6.2
(function() {
  var INTEGER_REGEX, STRING_REGEX, TYPES, decode, decodeInteger, decodeString, getType, isDataStructure, isString, primitives;

  isString = require('./identity_helpers').isString;

  module.exports = function(bencodedString) {
    if (!isString(bencodedString)) {
      throw new Error('Argument must be a bencoded string');
    }
    return (decode(bencodedString))[0];
  };

  decode = function(bencodedString) {
    var key, object, type, value, _ref, _ref1, _ref2;

    type = getType(bencodedString[0]);
    if (!isDataStructure(type)) {
      return primitives[type](bencodedString);
    }
    object = 'list' === type ? [] : {};
    bencodedString = bencodedString.substr(1);
    while (bencodedString.length) {
      if ('e' === bencodedString[0]) {
        bencodedString = bencodedString.substr(1);
        break;
      }
      if ('list' === type) {
        _ref = decode(bencodedString), value = _ref[0], bencodedString = _ref[1];
        object.push(value);
      } else {
        _ref1 = decode(bencodedString), key = _ref1[0], bencodedString = _ref1[1];
        _ref2 = decode(bencodedString), value = _ref2[0], bencodedString = _ref2[1];
        object[key] = value;
      }
    }
    return [object, bencodedString];
  };

  TYPES = {
    'i': 'integer',
    'l': 'list',
    'd': 'dictionary'
  };

  STRING_REGEX = /^(\d+):(.*)$/;

  INTEGER_REGEX = /^i(-?\d+)e(.*)$/;

  getType = function(char) {
    return TYPES[char] || 'string';
  };

  isDataStructure = function(type) {
    return type === 'list' || type === 'dictionary';
  };

  decodeString = function(bencodedString) {
    var length, remainingString, _, _ref;

    _ref = bencodedString.match(STRING_REGEX), _ = _ref[0], length = _ref[1], remainingString = _ref[2];
    return [remainingString.substr(0, length), remainingString.substr(length)];
  };

  decodeInteger = function(bencodedString) {
    var integer, remainingString, _, _ref;

    _ref = bencodedString.match(INTEGER_REGEX), _ = _ref[0], integer = _ref[1], remainingString = _ref[2];
    return [+integer, remainingString];
  };

  primitives = {
    string: decodeString,
    integer: decodeInteger
  };

}).call(this);
